데이터에서 손상되거나 부정확한 부분을 수정하고, 불필요한 데이터를 삭제하거나 불완전한 값을 교체하는 등의 작업을 데이터 정제 data cleaning이라고 합니다.
데이터를 분석 목적에 맞게 변환하는 data wrangling 또는 data munging의 일부로 수행될 수 있습니다.

Index 클래스를 비롯하여 판다스 배열 성격의 객체는 어떤 값과 비교할 때 자동으로 배열에 있는 모든 원소와 하나씩 비교해 줍니다.
이를 원소별 비교 element-wise comparison라고 합니다.

# drop() 메서드

# 중복된 행 찾기
판다스 데이터프레임의 중복된 행은 duplicated() 메서드를 사용하여 검사할 수 있습니다.
duplicated() 메서드는 기본적으로 데이터프레임에 있는 모든 열을 기준으로 중복된 행을 찾습니다.

# copy() 메서드
데이터프레임의 복사본을 만듭니다.
unique_rows 배열로 일부 행을 선택하여 만든 ns_book3의 '대출건수'열을 업데이트해야 하기 때문입니다.
판다스는 copy() 메서드를 사용하지 않으면 ns_book3 데이터프레임이 별도의 메모리 공간에 저장되는지 보장하지 않습니다.
따라서 명시적으로 복사하지 않고 '대출건수' 열을 업데이트하면 ns_book의 데이터가 바뀔수도 있습니다.
이런 이유로 판다스에서는 일부 행이나 열을 선택하여 데이터를 업데이트할 때는 항상 복사하는것이 좋습니다.

# 데이터 정제는 수집된 데이터에서 잘못된 부분을 고치거나 제거하여 필요한 데이터를 준비하는 과정입니다.
데이터가 올바르게 정제되지 못하면 분석된 결과를 왜곡시킬 수 있으며 잘못된 의사 결정을 초래하기도 합니다. 

# 누락된 값 바꾸기: loc, fillna() 메소드
누락된 값을 NaN이 아니라 빈 문자열('')로 바꾸겠습니다. 

loc 메서드를 사용하면 누락된 값을 원하는 값으로 바꿀 수 있습니다.
그러면 누락된 값을 가리키는 불리언 배열을 만들어야 하는데, 누락된 값을 확인하는 isna() 메서드로 간단하게 만들 수 있습니다.

isna() 메서드로 '세트 ISBN' 열의 NaN을 가리키는 set_isbn_na_rows 불리언 배열을 만들고, loc 메서드에 전달합니다.

loc 메서드로 NaN을 다른 값으로 바꿀 수 있지만, 더 편리한 방법은 fillna() 메서드 입니다.

# 누락된 값 바꾸기 2: replace() 
replace() 메서드는 NaN은 물론 어떤 값도 바꿀 수 있는 편리한 메서드입니다.

# 정규 표현식 (정규식) regular expression
문자역 패턴을 찾아서 대체하기 위한 규칙의 모음.

ns_book4.replace({'발행년도': {'2021':'21'}})[100:102] 
--> 연도가 2021일 경우 21로 바뀌지만 2018은 적용이 되지 않습니다.

1. 숫자 찾기 \d
네 자리 연도에 해당하는 표현은 \d\d\d\d입니다.
표현식을 그룹으로 묶을 때는 괄호를 사용합니다.
뒤에 두 자리만 하나의 그룹으로 묶을 때는 \d\d(\d\d)처럼 씁니다.

그럼 발행년도 열의 값을 정규 표현식으로 두 자리 연도로 바꾸어 보겠습니다.
앞에서 사용한 replace() 메서드와 비슷하지만 정규 표현식을 사용한다는 의미로 regex 매개변수 옵션을 True로 지정합니다.

이때 정규 표현식 앞에 붙인 r 문자는 python에서 정규 표현식을 다른 문자열과 구분하기 위해 접두사처럼 붙입니다.
{r'\d\d(\d\d)': r'\1'}

정규 표현식이 반복될 때는 일일이 쓰는 대신 다음과 같이 중괄호를 사용하여 개수를 지정할 수 있습니다.
예를 들어서 \d{2}는 \d\d와 동일하게 연속된 숫자 두 개를 의미합니다.
앞에서 사용한 숫자 네개를 찾는 정규 표현식을 이런 식으로 표현하면 \d{2}(\d{2})와 같이 쓸 수 있습니다. 

2. 문자 찾기 마침표(.)
어떤 문자에도 대응하는 정규 표현식 문자는 마침표(.)입니다.
이름은 몇 개의 글자로 이루어질지 알 수 없기 대문에 앞서 연도처럼 반복 개수를 지정하기가 어렵습니다.
이럴 때는 *문자를 사용하여 0개 이상 반복된다고 표시할 수 있습니다.

(지은이)를 삭제하려고 할 때, 패턴에 괄호가 있습니다.
정규 표현식에서 괄호는 그룹을 나타내는 데 사용하므로 일반 문자라고 인식하게 하려면 역슬래시(\)를 앞에 붙여야 합니다.
그리고 띄어쓰기가 있으므로 공백 문자를 나타내는 정규 표현식 \s를 앞에 붙입니다. 

# 잘못된 값 바꾸기
숫자에 대응하는 정규 표현식은 \d이고, 숫자가 아닌 다른 모든 문자에 대응하는 표현은 \D입니다.
정규 표현식은 이렇게 대소문자를 반대의 용도로 사용합니다.

contains() 메서드에 정규 표현식을 사용하면 특정 문자열을 포함하는지 쉽게 확인할 수 있습니다.

'발행년도'에서 숫자가 아닌 문자를 포함하는 모든 행을 찾아 보겠습니다.
contains() 메서드의 na 매개변수를 True로 지정하여 연도가 누락된 행을 True로 표시하겠습니다.
만약 '발행년도'열에 누락된 값이 있다면 contains() 메서드는 기본적으로 np.nan으로 채워서 invalid_number 배열을 인덱싱에 사용할 수 없기 때문입니다.
여기 누락된 값은 숫자 이외의 문자로 간주하겠습니다. 

정규 표현식을 사용하여 연도 앞과 뒤에 있는 문자를 제외해 보겠습니다.
연도를 나타내는 숫자 네개는 \d{4}이고 이 숫자는 그룹으로 묶어 \1로 참조합니다. 그리고 숫자 앞뒤에 어떤 문자가 나오더라도 모두 매칭하기 위해 .*를 사용합니다.

gt() - > 큰 값
ge() - >= 크거나 같은 값
lt() - < 작은값
le() - <= 작거나 같은 값
eq() - == 같은 값
ne() - != 다른 값

# 도서명, 저자, 출판사, 발행연도 추출하는 함수 만들기
도서명과 달리 저자는 두 명 이상일 수 있기 때문에 beautifulsoup의 find_all() 메서드를 사용해 저자를 담은 <a> 태그를 모두 추출합니다.
<a> 태그의 텍스트가 여러 개 추출되면 하나로 함쳐 주는 것이 좋겠네요.
리스트 안에 for 문을 사용하는 리스트 내포로 <a> 태그에 속한 모든 텍스트를 파이썬 리스트에 저장해 줍니다.
그 다음 추출한 결과를 join() 메서드를 사용해 하나의 문자열로 합쳐 줍니다.

발행년도는 '2020년 12월'처럼 쓰여 있으므로 정규식을 사용하여 연도만 추출해야 합니다.
파이썬에서 정규 표현식을 지원하는 re 모듈의 findall() 함수를 사용하면 원하는 정규식에 매칭되는 모든 문자열을 찾아 리스트로 반환해 줍니다.
이 함수의 첫 번째 매개변수는 원하는 정규식이고 두 번째 매개변수는 검색 대상 문자열 입니다. 
앞에서 배웠던 것 처럼 r'\d{4}' 패턴으로 연도만 추출하겠습니다. 




