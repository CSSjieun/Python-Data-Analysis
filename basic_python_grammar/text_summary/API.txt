**API란?**

데이터 분석가가 종종 데이터베이스에 직접 접근하기 어려운 경우가 있습니다. 
데이터베이스 접근 권한이 엄격히 관리되거나, 민감한 개인정보가 있거나, 아예 네트워크가 분리되어 물리적인 접근이 불가능할 수도 있습니다.
데이터베이스와 네트워크는 물론 개발 문화와 철학에 따라 상황은 다를 수 있겠지만, 데이터베이스 접근 권한은 복잡한 문제가 될 가능성이 높습니다.
이럴 때 인증된 URL만 있으면 언제든지 필요한 데이터에 편리하게 접근할 수 있는 방식이 바로 API입니다.

API (Application Programming Interface)는 두 프로그램이 서로 대화하기 위한 방법을 정의한 것입니다.
당연하지만 프로그램 A와 프로그램 B가 데이터를 주고 받는 규칙이 다르다면 올바르게 데이터를 처리하지 못합니다.

프로그램 A <- 프로그램 B (데이터 요청)
프로그램 A -> 프로그램 B (데이터 전송)

1. 웹 페이지를 전송하기 위한 통신 규약: HTTP
웹사이트는 웹 페이지를 서비스하기 위해 web server 소프트웨어를 사용합니다.
대표적인 웹 서버 프로그램으로는 엔진엑스 NGINX, 아파치 Apache 등이 있습니다.
이런 웹 서버 프로그램은 웹 브라우저와 통신할 때 HTTP란 protocol을 사용합니다.

HTTP (Hyper Text Transfer Protocol)는 인터넷에서 웹 페이지를 전송하는 기본 통신 방법입니다.

2. 웹 페이지 문서: HTML
HTML(Hypertext Markup Language)은 웹 브라우저가 화면에 표시할 수 있는 문서의 한 종류이자 웹 페이지를 위한 표준 언어입니다.
HTML 같은 언어를 markup 언어라고 부르며 <div>와 같은 표시를 tag라고 부릅니다.

프로그램 A <- 프로그램 B (데이터 요청: HTTP request)
프로그램 A -> 프로그램 B (데이터 전송: CSV, JSON, XML)

3. JSON
JSON (JavaScript Object Notation)은 자바스크립트 언어를 위해 만들어졌지만 현재는 범용적인 포맷으로 사용합니다.
대부분의 프로그래밍 언어는 JSON 형태의 텍스트를 읽고 쓸 수 있습니다. 
JSON은 마치 python의 dictionary와 list를 충첩해 놓은 것과 비슷합니다. 
Python의 dictionary와 비슷하게 key와 value를 :(colon)으로 연결합니다.

(예) {"name"(key): "data analysis"(value)}

3.1 json.dumps() 함수
파이썬의 json 패키지를 사용해 딕셔너리를 JSON 형식에 맞는 문자열로 바꿀 수 있습니다.

d_str = json.dumps(d, ensure_ascii=False)
ensure_ascii 매개변수를 False로 지정한 이유는 dictionary에 한글이 포함되어 있기 때문입니다.

웹 기반 API는 전송하려는 파이썬 객체를 json.dumps() 함수를 사용하여 JSON 문자열로 변환하여 전송합니다.
그런데 이런 JSON 문자열을 파이썬 프로그램에서 사용하려면 다시 파이썬 딕셔너리로 바꾸어야 합니다.

3.2. JSON 문자열을 파이썬 객체로 변환하기: json.loads()
json.loads() 함수를 사용하면 JSON 문자열을 파이썬 객체로 변환할 수 있습니다. 

3.2.1 바로 파이썬 객체를 전송하지 않고 문자열로 바꾸어 전송하는 이유?
웹 기반 API가 사용하는 HTTP protocol이 text기반이기 때문입니다.
웹 브라우저에서 HTML 소스를 보았을 때 텍스트로 출력되었습니다.
그래서 HTTP protocol로 데이터를 전송하려면 먼저 객체를 텍스트로 변환해야 합니다.
이렇게 프로그램 상의 객체를 저장하거나 읽을 수 있는 형태로 변환하는 것을 직렬화 serialization이라고 합니다. 
반대로 직렬화된 정보를 다시 프로그램에서 실행 가능한 객체로 변환하는 것을 역직렬화 deserialization이라고 합니다.

3.3. JSON 문자열을 데이터프레임으로 변환하기: read_json()

JSON 객체가 데이터 프레임으로 각 행에 mapping 됩니다.

JSON을 데이터프레임으로 바꾸는 또 다른 방법은 JSON 문자열을 파이썬 객체로 만든 다음에 Data Frame 클래스를 사용하는 것입니다..

4. XML
XML은 eXtensible Markup Language의 약자입니다.
HTML은 웹 페이지를 표현하는 데는 뛰어나지만, 구조적이지 못하기 때문에 프로그램 간의 약속대로 전송하는 API에는 적절하지 않습니다.
대신 XML은 컴퓨터와 사람이 모두 읽고 쓰기 편한 문서 포맷을 위해 고안되었습니다.

<boo>: root, parent
    <name> /start tag data analysis </name> / end tag --> child
    <author> noname </author> --> child
    <year> 2024 </year> --> child
</book>

XML은 element들이 계층 구조를 이루면서 정보를 표현합니다.
Element는 시작 태크와 종료 태그로 감쌉니다. 
Tag는 <기호로 시작해서 >기호로 끝나며 태크 이름은 영문자와 숫자를 사용합니다.
book의 element가 세개의 하위 element를 가지고 있습니다.
이 때 <book> element를 부모 엘리먼트 parent element 혹은 부모 노드 parent node라고 부릅니다.
<name>, <author>, <year> element는 <book> element의 자식 엘리먼트 child element입니다.

4.1 XML 문자열을 파이썬 객체로 변환하기: fromstring()
xml.etree.ElementTree 모듈의 fromstring() 함수를 이용하여 문자열을 XML로 변환할 수 있습니다.

json 패키지는 JSON 문자열을 파이썬 객체로 변환하지만, fromstring() 함수가 반환하는 객체는 단순한 파이썬 객체가 아니라 ElementTree 모듈 아래에 정의된 Element 클래스의 객체입니다.

4.2 자식 엘리먼트 확인하기: findtext() method

5. API를 호출하는 URL 작성하기
조회할 값은 호출 URL 뒤에 파라미터를 연결하면 됩니다.
파라미터와 값은 =문자로 연결하고 파라미터 사이는 & 문자로 연결합니다.
호출 URL과 파라미터는 ?로 연결합니다.
--> HTTP GET request










